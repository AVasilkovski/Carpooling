// <auto-generated />
using System;
using Carpooling.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Carpooling.Data.Migrations
{
    [DbContext(typeof(CarpoolingContext))]
    partial class CarpoolingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Carpooling.Data.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Plovdiv"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Sofia"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Varna"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Pernik"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Radomir"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Montana"
                        });
                });

            modelBuilder.Entity("Carpooling.Data.Models.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Rating")
                        .HasMaxLength(5)
                        .HasColumnType("float");

                    b.Property<int>("TravelId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("UserFromId")
                        .HasColumnType("int");

                    b.Property<int>("UserToId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TravelId");

                    b.HasIndex("UserFromId");

                    b.HasIndex("UserToId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "Amazing person. It was cool to travel with you.",
                            Rating = 4.9000000000000004,
                            TravelId = 1,
                            Type = 0,
                            UserFromId = 1,
                            UserToId = 2
                        },
                        new
                        {
                            Id = 2,
                            Comment = "Very quiet.",
                            Rating = 4.5,
                            TravelId = 1,
                            Type = 0,
                            UserFromId = 1,
                            UserToId = 3
                        },
                        new
                        {
                            Id = 3,
                            Comment = "Please do not try to bypass the rules and smoke when someone says it is forbidden.",
                            Rating = 3.0,
                            TravelId = 1,
                            Type = 0,
                            UserFromId = 1,
                            UserToId = 4
                        },
                        new
                        {
                            Id = 4,
                            Comment = "Drives very safely.",
                            Rating = 5.0,
                            TravelId = 1,
                            Type = 1,
                            UserFromId = 2,
                            UserToId = 1
                        },
                        new
                        {
                            Id = 5,
                            Comment = "Very chill.",
                            Rating = 5.0,
                            TravelId = 1,
                            Type = 1,
                            UserFromId = 3,
                            UserToId = 1
                        },
                        new
                        {
                            Id = 6,
                            Comment = "Drove us safely to our destination.",
                            Rating = 5.0,
                            TravelId = 1,
                            Type = 1,
                            UserFromId = 4,
                            UserToId = 1
                        },
                        new
                        {
                            Id = 7,
                            Comment = "It's awesome to have him as company during a travel.",
                            Rating = 5.0,
                            TravelId = 2,
                            Type = 0,
                            UserFromId = 2,
                            UserToId = 1
                        },
                        new
                        {
                            Id = 8,
                            Comment = "Had a good laugh with you around.",
                            Rating = 4.7000000000000002,
                            TravelId = 2,
                            Type = 0,
                            UserFromId = 2,
                            UserToId = 5
                        },
                        new
                        {
                            Id = 9,
                            Comment = "An awesome person and an awesome driver.",
                            Rating = 4.9000000000000004,
                            TravelId = 2,
                            Type = 1,
                            UserFromId = 1,
                            UserToId = 2
                        },
                        new
                        {
                            Id = 10,
                            Comment = "Such a good driver, it's like he came out of Fast & Furious.",
                            Rating = 4.9000000000000004,
                            TravelId = 2,
                            Type = 1,
                            UserFromId = 5,
                            UserToId = 2
                        },
                        new
                        {
                            Id = 11,
                            Comment = "Sometimes she complains a lot but other than that she was quite nice.",
                            Rating = 4.0999999999999996,
                            TravelId = 3,
                            Type = 0,
                            UserFromId = 3,
                            UserToId = 6
                        },
                        new
                        {
                            Id = 12,
                            Rating = 5.0,
                            TravelId = 3,
                            Type = 0,
                            UserFromId = 3,
                            UserToId = 7
                        },
                        new
                        {
                            Id = 13,
                            Comment = "Very noisy and sometimes even iritating.",
                            Rating = 3.2999999999999998,
                            TravelId = 3,
                            Type = 0,
                            UserFromId = 3,
                            UserToId = 8
                        },
                        new
                        {
                            Id = 14,
                            Rating = 4.5,
                            TravelId = 3,
                            Type = 1,
                            UserFromId = 6,
                            UserToId = 3
                        },
                        new
                        {
                            Id = 15,
                            Comment = "Provided a pleasant and fast ride.",
                            Rating = 4.5,
                            TravelId = 3,
                            Type = 1,
                            UserFromId = 7,
                            UserToId = 3
                        },
                        new
                        {
                            Id = 16,
                            Comment = "Can't believe I was in a ride with John Cena.",
                            Rating = 4.5,
                            TravelId = 3,
                            Type = 1,
                            UserFromId = 8,
                            UserToId = 3
                        },
                        new
                        {
                            Id = 17,
                            Comment = "Brought a pet even though it wasn't allowed. At least the pet was cute.",
                            Rating = 3.1000000000000001,
                            TravelId = 4,
                            Type = 0,
                            UserFromId = 4,
                            UserToId = 10
                        },
                        new
                        {
                            Id = 18,
                            Rating = 5.0,
                            TravelId = 4,
                            Type = 1,
                            UserFromId = 10,
                            UserToId = 4
                        },
                        new
                        {
                            Id = 19,
                            Comment = "Had a good time on the trip with you",
                            Rating = 5.0,
                            TravelId = 4,
                            Type = 1,
                            UserFromId = 14,
                            UserToId = 4
                        },
                        new
                        {
                            Id = 20,
                            Comment = "Good stuff my guy",
                            Rating = 5.0,
                            TravelId = 4,
                            Type = 0,
                            UserFromId = 14,
                            UserToId = 2
                        },
                        new
                        {
                            Id = 21,
                            Comment = "Cool",
                            Rating = 5.0,
                            TravelId = 5,
                            Type = 0,
                            UserFromId = 14,
                            UserToId = 1
                        },
                        new
                        {
                            Id = 22,
                            Comment = "10/10 best stamat",
                            Rating = 5.0,
                            TravelId = 5,
                            Type = 1,
                            UserFromId = 1,
                            UserToId = 14
                        },
                        new
                        {
                            Id = 23,
                            Comment = "Stamat is the best",
                            Rating = 5.0,
                            TravelId = 5,
                            Type = 1,
                            UserFromId = 2,
                            UserToId = 14
                        },
                        new
                        {
                            Id = 24,
                            Comment = "Stamat rules",
                            Rating = 5.0,
                            TravelId = 5,
                            Type = 1,
                            UserFromId = 3,
                            UserToId = 14
                        },
                        new
                        {
                            Id = 25,
                            Comment = "Had a good time on the trip with you",
                            Rating = 5.0,
                            TravelId = 4,
                            Type = 1,
                            UserFromId = 11,
                            UserToId = 10
                        },
                        new
                        {
                            Id = 26,
                            Comment = "Had a good time on the trip with you",
                            Rating = 5.0,
                            TravelId = 4,
                            Type = 1,
                            UserFromId = 10,
                            UserToId = 8
                        });
                });

            modelBuilder.Entity("Carpooling.Data.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "User"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("Carpooling.Data.Models.Travel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<int>("EndPointCityId")
                        .HasColumnType("int");

                    b.Property<int>("FreeSpots")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("StartPointCityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("EndPointCityId");

                    b.HasIndex("StartPointCityId");

                    b.ToTable("Travels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DepartureTime = new DateTime(2022, 2, 20, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = 1,
                            EndPointCityId = 1,
                            FreeSpots = 3,
                            IsCompleted = false,
                            StartPointCityId = 2
                        },
                        new
                        {
                            Id = 2,
                            DepartureTime = new DateTime(2022, 1, 20, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = 2,
                            EndPointCityId = 1,
                            FreeSpots = 2,
                            IsCompleted = true,
                            StartPointCityId = 2
                        },
                        new
                        {
                            Id = 3,
                            DepartureTime = new DateTime(2022, 3, 20, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = 3,
                            EndPointCityId = 2,
                            FreeSpots = 4,
                            IsCompleted = false,
                            StartPointCityId = 1
                        },
                        new
                        {
                            Id = 4,
                            DepartureTime = new DateTime(2021, 12, 20, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = 4,
                            EndPointCityId = 1,
                            FreeSpots = 0,
                            IsCompleted = true,
                            StartPointCityId = 2
                        },
                        new
                        {
                            Id = 5,
                            DepartureTime = new DateTime(2022, 1, 10, 10, 50, 0, 0, DateTimeKind.Unspecified),
                            DriverId = 14,
                            EndPointCityId = 5,
                            FreeSpots = 4,
                            IsCompleted = true,
                            StartPointCityId = 3
                        },
                        new
                        {
                            Id = 6,
                            DepartureTime = new DateTime(2022, 2, 11, 15, 40, 0, 0, DateTimeKind.Unspecified),
                            DriverId = 5,
                            EndPointCityId = 6,
                            FreeSpots = 2,
                            IsCompleted = false,
                            StartPointCityId = 1
                        },
                        new
                        {
                            Id = 7,
                            DepartureTime = new DateTime(2021, 12, 22, 23, 30, 0, 0, DateTimeKind.Unspecified),
                            DriverId = 6,
                            EndPointCityId = 2,
                            FreeSpots = 4,
                            IsCompleted = false,
                            StartPointCityId = 6
                        },
                        new
                        {
                            Id = 8,
                            DepartureTime = new DateTime(2021, 12, 18, 9, 30, 0, 0, DateTimeKind.Unspecified),
                            DriverId = 7,
                            EndPointCityId = 1,
                            FreeSpots = 3,
                            IsCompleted = false,
                            StartPointCityId = 5
                        },
                        new
                        {
                            Id = 9,
                            DepartureTime = new DateTime(2021, 12, 15, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = 8,
                            EndPointCityId = 2,
                            FreeSpots = 5,
                            IsCompleted = false,
                            StartPointCityId = 4
                        },
                        new
                        {
                            Id = 10,
                            DepartureTime = new DateTime(2022, 1, 8, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = 10,
                            EndPointCityId = 6,
                            FreeSpots = 2,
                            IsCompleted = true,
                            StartPointCityId = 3
                        },
                        new
                        {
                            Id = 11,
                            DepartureTime = new DateTime(2021, 12, 11, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = 14,
                            EndPointCityId = 6,
                            FreeSpots = 1,
                            IsCompleted = false,
                            StartPointCityId = 4
                        },
                        new
                        {
                            Id = 12,
                            DepartureTime = new DateTime(2022, 3, 6, 13, 40, 0, 0, DateTimeKind.Unspecified),
                            DriverId = 14,
                            EndPointCityId = 3,
                            FreeSpots = 4,
                            IsCompleted = false,
                            StartPointCityId = 5
                        },
                        new
                        {
                            Id = 13,
                            DepartureTime = new DateTime(2022, 2, 15, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = 14,
                            EndPointCityId = 2,
                            FreeSpots = 4,
                            IsCompleted = false,
                            StartPointCityId = 5
                        });
                });

            modelBuilder.Entity("Carpooling.Data.Models.TravelTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TravelTags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Tag = "No smoking"
                        },
                        new
                        {
                            Id = 2,
                            Tag = "No luggage"
                        },
                        new
                        {
                            Id = 3,
                            Tag = "No pets"
                        },
                        new
                        {
                            Id = 4,
                            Tag = "No eating"
                        },
                        new
                        {
                            Id = 5,
                            Tag = "No children"
                        },
                        new
                        {
                            Id = 6,
                            Tag = "No stops along the way"
                        });
                });

            modelBuilder.Entity("Carpooling.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePictureName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("RatingAsDriver")
                        .HasColumnType("float");

                    b.Property<double>("RatingAsPassenger")
                        .HasColumnType("float");

                    b.Property<int>("UserStatus")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "gosho.t@gmail.com",
                            FirstName = "Georgi",
                            LastName = "Todorov",
                            Password = "Randompass+12",
                            PhoneNumber = "0923425084",
                            ProfilePictureName = "goshProfilePic.jpeg",
                            RatingAsDriver = 5.0,
                            RatingAsPassenger = 5.0,
                            UserStatus = 0,
                            Username = "Gosho23"
                        },
                        new
                        {
                            Id = 2,
                            Email = "misteriouswrestler@gmail.com",
                            FirstName = "Rey",
                            LastName = "Misterio",
                            Password = "Bigmistery*3",
                            PhoneNumber = "0861422101",
                            ProfilePictureName = "wrestlerProfilePic.jpeg",
                            RatingAsDriver = 4.9000000000000004,
                            RatingAsPassenger = 4.9000000000000004,
                            UserStatus = 0,
                            Username = "prowrestler11"
                        },
                        new
                        {
                            Id = 3,
                            Email = "cantseeme@gmail.com",
                            FirstName = "John",
                            LastName = "Cena",
                            Password = "No+vision3",
                            PhoneNumber = "0902115402",
                            ProfilePictureName = "invisiblemanProfilepic.jpeg",
                            RatingAsDriver = 4.5,
                            RatingAsPassenger = 4.5,
                            UserStatus = 0,
                            Username = "invisibleman"
                        },
                        new
                        {
                            Id = 4,
                            Email = "martoS23@gmail.com",
                            FirstName = "Martin",
                            LastName = "Simeonov",
                            Password = "marto&12",
                            PhoneNumber = "08881729301",
                            ProfilePictureName = "itsmartoProfilepic.jpeg",
                            RatingAsDriver = 5.0,
                            RatingAsPassenger = 3.0,
                            UserStatus = 0,
                            Username = "itsmarto"
                        },
                        new
                        {
                            Id = 5,
                            Email = "sashko32@gmail.com",
                            FirstName = "Aleks",
                            LastName = "Aleksandrov",
                            Password = "weak^pass23",
                            PhoneNumber = "0920816642",
                            ProfilePictureName = "SashkoBeatsProfilepic.jpeg",
                            RatingAsDriver = 0.0,
                            RatingAsPassenger = 4.7000000000000002,
                            UserStatus = 0,
                            Username = "SashkoBeats"
                        },
                        new
                        {
                            Id = 6,
                            Email = "nikolova45@gmail.com",
                            FirstName = "Lia",
                            LastName = "Nikolova",
                            Password = "Аleale!5",
                            PhoneNumber = "0878819200",
                            ProfilePictureName = "lilka405Profile.jpeg",
                            RatingAsDriver = 0.0,
                            RatingAsPassenger = 4.0999999999999996,
                            UserStatus = 0,
                            Username = "lilka405"
                        },
                        new
                        {
                            Id = 7,
                            Email = "emi.kovacheva@gmail.com",
                            FirstName = "Emilia",
                            LastName = "Kovacheva",
                            Password = "Мilkaа#2",
                            PhoneNumber = "0937122884",
                            ProfilePictureName = "emilia85Profilepic.jpeg",
                            RatingAsDriver = 0.0,
                            RatingAsPassenger = 5.0,
                            UserStatus = 0,
                            Username = "emilia85"
                        },
                        new
                        {
                            Id = 8,
                            Email = "grigor.g43@gmail.com",
                            FirstName = "Grigor",
                            LastName = "Georgiev",
                            Password = "Thegman!2",
                            PhoneNumber = "08222616242",
                            ProfilePictureName = "grigs45Profilepic.jpeg",
                            RatingAsDriver = 5.0,
                            RatingAsPassenger = 3.2999999999999998,
                            UserStatus = 0,
                            Username = "grigs45"
                        },
                        new
                        {
                            Id = 9,
                            Email = "p.krustev@gmail.com",
                            FirstName = "Pavel",
                            LastName = "Krustev",
                            Password = "Thepass$2",
                            PhoneNumber = "0977800152",
                            ProfilePictureName = "saintpafProfilepic.jpeg",
                            RatingAsDriver = 0.0,
                            RatingAsPassenger = 2.5,
                            UserStatus = 1,
                            Username = "saintpaf"
                        },
                        new
                        {
                            Id = 10,
                            Email = "kris.d@gmail.com",
                            FirstName = "Kristian",
                            LastName = "Damqnov",
                            Password = "Passman^4",
                            PhoneNumber = "0728633050",
                            ProfilePictureName = "kriso29ProfilePic.jpg",
                            RatingAsDriver = 5.0,
                            RatingAsPassenger = 3.1000000000000001,
                            UserStatus = 0,
                            Username = "kriso29"
                        },
                        new
                        {
                            Id = 11,
                            Email = "oleg.borisov@gmail.com",
                            FirstName = "Oleg",
                            LastName = "Borisov",
                            Password = "Partytime!4",
                            PhoneNumber = "0800302072",
                            ProfilePictureName = "partymanProfilepic.jpeg",
                            RatingAsDriver = 0.0,
                            RatingAsPassenger = 3.8999999999999999,
                            UserStatus = 0,
                            Username = "partyman"
                        },
                        new
                        {
                            Id = 12,
                            Email = "vankata.kirilov@gmail.com",
                            FirstName = "Ivan",
                            LastName = "Kirilov",
                            Password = "Theadmin-1",
                            PhoneNumber = "0234517022",
                            ProfilePictureName = "admin1Profilepic.jpg",
                            RatingAsDriver = 0.0,
                            RatingAsPassenger = 0.0,
                            UserStatus = 0,
                            Username = "admin1"
                        },
                        new
                        {
                            Id = 13,
                            Email = "bojinkata@gmail.com",
                            FirstName = "Valeri",
                            LastName = "Bojinov",
                            Password = "Malkokote&23",
                            PhoneNumber = "0814171920",
                            ProfilePictureName = "coconutmaster72Profilepic.jpeg",
                            RatingAsDriver = 0.0,
                            RatingAsPassenger = 0.0,
                            UserStatus = 0,
                            Username = "coconutmaster72"
                        },
                        new
                        {
                            Id = 14,
                            Email = "notstamatjoke@gmail.com",
                            FirstName = "Stamat",
                            LastName = "Stamatov",
                            Password = "Demopass*2",
                            PhoneNumber = "0939452370",
                            ProfilePictureName = "demoUserProfilepic.jpeg",
                            RatingAsDriver = 5.0,
                            RatingAsPassenger = 4.5,
                            UserStatus = 0,
                            Username = "demoUser"
                        });
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleUser");

                    b.HasData(
                        new
                        {
                            RolesId = 1,
                            UsersId = 1
                        },
                        new
                        {
                            RolesId = 1,
                            UsersId = 2
                        },
                        new
                        {
                            RolesId = 1,
                            UsersId = 3
                        },
                        new
                        {
                            RolesId = 1,
                            UsersId = 4
                        },
                        new
                        {
                            RolesId = 1,
                            UsersId = 5
                        },
                        new
                        {
                            RolesId = 1,
                            UsersId = 6
                        },
                        new
                        {
                            RolesId = 1,
                            UsersId = 7
                        },
                        new
                        {
                            RolesId = 1,
                            UsersId = 8
                        },
                        new
                        {
                            RolesId = 1,
                            UsersId = 9
                        },
                        new
                        {
                            RolesId = 1,
                            UsersId = 10
                        },
                        new
                        {
                            RolesId = 1,
                            UsersId = 11
                        },
                        new
                        {
                            RolesId = 1,
                            UsersId = 12
                        },
                        new
                        {
                            RolesId = 1,
                            UsersId = 13
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = 12
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = 13
                        },
                        new
                        {
                            RolesId = 1,
                            UsersId = 14
                        });
                });

            modelBuilder.Entity("TravelTravelTag", b =>
                {
                    b.Property<int>("TravelTagsId")
                        .HasColumnType("int");

                    b.Property<int>("TravelsId")
                        .HasColumnType("int");

                    b.HasKey("TravelTagsId", "TravelsId");

                    b.HasIndex("TravelsId");

                    b.ToTable("TravelTravelTag");

                    b.HasData(
                        new
                        {
                            TravelTagsId = 1,
                            TravelsId = 1
                        },
                        new
                        {
                            TravelTagsId = 2,
                            TravelsId = 1
                        },
                        new
                        {
                            TravelTagsId = 3,
                            TravelsId = 1
                        },
                        new
                        {
                            TravelTagsId = 3,
                            TravelsId = 2
                        },
                        new
                        {
                            TravelTagsId = 4,
                            TravelsId = 2
                        },
                        new
                        {
                            TravelTagsId = 1,
                            TravelsId = 3
                        },
                        new
                        {
                            TravelTagsId = 3,
                            TravelsId = 3
                        },
                        new
                        {
                            TravelTagsId = 4,
                            TravelsId = 3
                        },
                        new
                        {
                            TravelTagsId = 1,
                            TravelsId = 4
                        },
                        new
                        {
                            TravelTagsId = 3,
                            TravelsId = 4
                        },
                        new
                        {
                            TravelTagsId = 1,
                            TravelsId = 5
                        },
                        new
                        {
                            TravelTagsId = 2,
                            TravelsId = 6
                        },
                        new
                        {
                            TravelTagsId = 3,
                            TravelsId = 7
                        },
                        new
                        {
                            TravelTagsId = 3,
                            TravelsId = 8
                        },
                        new
                        {
                            TravelTagsId = 4,
                            TravelsId = 9
                        },
                        new
                        {
                            TravelTagsId = 1,
                            TravelsId = 10
                        },
                        new
                        {
                            TravelTagsId = 3,
                            TravelsId = 11
                        },
                        new
                        {
                            TravelTagsId = 4,
                            TravelsId = 12
                        },
                        new
                        {
                            TravelTagsId = 1,
                            TravelsId = 13
                        });
                });

            modelBuilder.Entity("TravelUser", b =>
                {
                    b.Property<int>("AppliedTravelsId")
                        .HasColumnType("int");

                    b.Property<int>("ApplyingPassengersId")
                        .HasColumnType("int");

                    b.HasKey("AppliedTravelsId", "ApplyingPassengersId");

                    b.HasIndex("ApplyingPassengersId");

                    b.ToTable("TravelUser");

                    b.HasData(
                        new
                        {
                            AppliedTravelsId = 3,
                            ApplyingPassengersId = 9
                        },
                        new
                        {
                            AppliedTravelsId = 13,
                            ApplyingPassengersId = 1
                        },
                        new
                        {
                            AppliedTravelsId = 13,
                            ApplyingPassengersId = 2
                        },
                        new
                        {
                            AppliedTravelsId = 12,
                            ApplyingPassengersId = 2
                        },
                        new
                        {
                            AppliedTravelsId = 12,
                            ApplyingPassengersId = 3
                        },
                        new
                        {
                            AppliedTravelsId = 10,
                            ApplyingPassengersId = 14
                        },
                        new
                        {
                            AppliedTravelsId = 9,
                            ApplyingPassengersId = 14
                        });
                });

            modelBuilder.Entity("TravelUser1", b =>
                {
                    b.Property<int>("PassengersId")
                        .HasColumnType("int");

                    b.Property<int>("TravelsAsPassengerId")
                        .HasColumnType("int");

                    b.HasKey("PassengersId", "TravelsAsPassengerId");

                    b.HasIndex("TravelsAsPassengerId");

                    b.ToTable("TravelUser1");

                    b.HasData(
                        new
                        {
                            PassengersId = 1,
                            TravelsAsPassengerId = 2
                        },
                        new
                        {
                            PassengersId = 2,
                            TravelsAsPassengerId = 1
                        },
                        new
                        {
                            PassengersId = 3,
                            TravelsAsPassengerId = 1
                        },
                        new
                        {
                            PassengersId = 4,
                            TravelsAsPassengerId = 1
                        },
                        new
                        {
                            PassengersId = 5,
                            TravelsAsPassengerId = 2
                        },
                        new
                        {
                            PassengersId = 6,
                            TravelsAsPassengerId = 3
                        },
                        new
                        {
                            PassengersId = 7,
                            TravelsAsPassengerId = 3
                        },
                        new
                        {
                            PassengersId = 8,
                            TravelsAsPassengerId = 3
                        },
                        new
                        {
                            PassengersId = 1,
                            TravelsAsPassengerId = 5
                        },
                        new
                        {
                            PassengersId = 2,
                            TravelsAsPassengerId = 5
                        },
                        new
                        {
                            PassengersId = 3,
                            TravelsAsPassengerId = 5
                        },
                        new
                        {
                            PassengersId = 4,
                            TravelsAsPassengerId = 5
                        },
                        new
                        {
                            PassengersId = 4,
                            TravelsAsPassengerId = 12
                        },
                        new
                        {
                            PassengersId = 5,
                            TravelsAsPassengerId = 12
                        },
                        new
                        {
                            PassengersId = 3,
                            TravelsAsPassengerId = 13
                        },
                        new
                        {
                            PassengersId = 5,
                            TravelsAsPassengerId = 13
                        },
                        new
                        {
                            PassengersId = 14,
                            TravelsAsPassengerId = 10
                        },
                        new
                        {
                            PassengersId = 11,
                            TravelsAsPassengerId = 10
                        },
                        new
                        {
                            PassengersId = 14,
                            TravelsAsPassengerId = 9
                        },
                        new
                        {
                            PassengersId = 10,
                            TravelsAsPassengerId = 9
                        });
                });

            modelBuilder.Entity("Carpooling.Data.Models.Feedback", b =>
                {
                    b.HasOne("Carpooling.Data.Models.Travel", "Travel")
                        .WithMany("Feedbacks")
                        .HasForeignKey("TravelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Carpooling.Data.Models.User", "UserFrom")
                        .WithMany("GivenFeedbacks")
                        .HasForeignKey("UserFromId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Carpooling.Data.Models.User", "UserTo")
                        .WithMany("RecievedFeedbacks")
                        .HasForeignKey("UserToId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Travel");

                    b.Navigation("UserFrom");

                    b.Navigation("UserTo");
                });

            modelBuilder.Entity("Carpooling.Data.Models.Travel", b =>
                {
                    b.HasOne("Carpooling.Data.Models.User", "Driver")
                        .WithMany("TravelsAsDriver")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Carpooling.Data.Models.City", "EndPointCity")
                        .WithMany("TravelEndPoints")
                        .HasForeignKey("EndPointCityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Carpooling.Data.Models.City", "StartPointCity")
                        .WithMany("TravelStartPoints")
                        .HasForeignKey("StartPointCityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("EndPointCity");

                    b.Navigation("StartPointCity");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("Carpooling.Data.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Carpooling.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TravelTravelTag", b =>
                {
                    b.HasOne("Carpooling.Data.Models.TravelTag", null)
                        .WithMany()
                        .HasForeignKey("TravelTagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Carpooling.Data.Models.Travel", null)
                        .WithMany()
                        .HasForeignKey("TravelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TravelUser", b =>
                {
                    b.HasOne("Carpooling.Data.Models.Travel", null)
                        .WithMany()
                        .HasForeignKey("AppliedTravelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Carpooling.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("ApplyingPassengersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TravelUser1", b =>
                {
                    b.HasOne("Carpooling.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("PassengersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Carpooling.Data.Models.Travel", null)
                        .WithMany()
                        .HasForeignKey("TravelsAsPassengerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Carpooling.Data.Models.City", b =>
                {
                    b.Navigation("TravelEndPoints");

                    b.Navigation("TravelStartPoints");
                });

            modelBuilder.Entity("Carpooling.Data.Models.Travel", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("Carpooling.Data.Models.User", b =>
                {
                    b.Navigation("GivenFeedbacks");

                    b.Navigation("RecievedFeedbacks");

                    b.Navigation("TravelsAsDriver");
                });
#pragma warning restore 612, 618
        }
    }
}
